This is a demo of running node container and pg container with volume, here both the cotainers will be in a single network.

// DOCKER FILE

FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
COPY ./prisma ./prisma

RUN npm install
RUN npx prisma generate

COPY . .

RUN npm run build

EXPOSE 3000

CMD ["sh", "-c", "npx prisma migrate deploy && node dist/index.js"]





// DOCKER_COMPOSE FILE
// this will also make sure that you run migrations only after the db is ready.

version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: your_database
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - my_network
    ports:
      - "5432:5432"

  node:
    build: .  # Add this line to build the image from the Dockerfile in the current directory
    image: be_test
    container_name: backend_app
    networks:
      - my_network
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgres://postgres:your_password@postgres:5432/your_database
    ports:
      - "3000:3000"

volumes:
  pgdata:

networks:
  my_network:
    driver: bridge      




Now run "docker-compose up --build" in this example, make sure both docker-compose.yaml and Docker file are in same folder
